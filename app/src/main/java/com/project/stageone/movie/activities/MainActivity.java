package com.project.stageone.movie.activities;import android.content.BroadcastReceiver;import android.content.Context;import android.content.res.Configuration;import android.databinding.DataBindingUtil;import android.os.Build;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import com.project.stageone.movie.R;import com.project.stageone.movie.adapter.MovieAdapter;import com.project.stageone.movie.api.ApiClient;import com.project.stageone.movie.api.ApiInterface;import com.project.stageone.movie.databinding.ActivityMainBinding;import com.project.stageone.movie.models.Movie;import com.project.stageone.movie.models.MovieResponse;import com.project.stageone.movie.rest.ConnectivityReceiver;import com.project.stageone.movie.rest.Utils;import java.util.ArrayList;import java.util.List;import jp.wasabeef.recyclerview.animators.SlideInUpAnimator;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;// Created by Daria Kalashnikova 04.02.2018public class MainActivity extends AppCompatActivity implements MovieAdapter.OnClickHandler {    public static final String EXTRA_MOVIE_KEY = "MOVIE_DETAILS";    private static final String MOVIE_LIST = "MOVIE_LIST";    private final Context mContext = MainActivity.this;    List<Movie> mModel;    RecyclerView mRecycle;    BroadcastReceiver mConnectivityReceiver;    private MovieAdapter movieAdapter;    private Movie mMovie;    private ApiInterface apiInterface;    private String[] selectionKeys;    private String[] selectionLabels;    private String sorting;    private boolean isConnected;    private ActivityMainBinding mBinding;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_main);        setSupportActionBar((Toolbar) mBinding.toolbar);        mConnectivityReceiver = new ConnectivityReceiver();        mRecycle = findViewById(R.id.recycle);        mModel = new ArrayList<>();        // Get string values from the string-array that contain preference keys        selectionKeys = getResources().getStringArray(R.array.selection_values);        // Get string values from the string-array that contain preference labels        selectionLabels = getResources().getStringArray(R.array.selection_spinner_labels);        mRecycle.setHasFixedSize(true);        mRecycle.setLayoutManager(new GridLayoutManager(mContext, (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) ? 2 : 4));        movieAdapter = new MovieAdapter(MainActivity.this);        mRecycle.setItemAnimator(new SlideInUpAnimator());        mRecycle.setAdapter(movieAdapter);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            final ArrayAdapter mArray = new ArrayAdapter<>(mContext, R.layout.custom_spinner, selectionLabels);            mArray.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            mBinding.spinner.setAdapter(mArray);            mBinding.spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                    switch (position) {                        case 0:                            MovieSettings(selectionKeys[0]);                            break;                        case 1:                            MovieSettings(selectionKeys[1]);                            break;                        case 2:                            Utils.startIntent(mContext, FavoriteActivity.class);                            break;                    }                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                    MovieSettings(selectionKeys[0]);                }            });        }        isConnected = Utils.checkConnection(mContext);        if (isConnected) {            getMovies(sorting);        } else {            Utils.showErrorDialogue(                    getResources().getColor(R.color.warning_icon),                    getResources().getDrawable(R.drawable.ic_error), mContext,                    getResources().getString(R.string.alert_dialog_title),                    getResources().getString(R.string.no_internet),                    getResources().getString(R.string.okay_button));        }    }    /**     * Callback will be triggered when there is change in     * network connection     */    @Override    public void onNetworkConnectionChanged(boolean isConnected) {        this.isConnected = isConnected;        getMovies(sorting);    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putParcelable(MOVIE_LIST, mMovie);    }    @Override    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);        mMovie = savedInstanceState.getParcelable(MOVIE_LIST);    }    /**     * Method for setting the sort value for movies     */    private void MovieSettings(String sorting) {        this.sorting = sorting;        getMovies(sorting);        movieAdapter.notifyDataSetChanged();    }    private void getMovies(String sort) {        Utils.showProgressBar(mBinding.progressBar, mRecycle);        apiInterface = ApiClient.getClient().create(ApiInterface.class);        final Call<MovieResponse> callResponse = apiInterface.getMovie(sort, ApiInterface.API_KEY);        callResponse.enqueue(new Callback<MovieResponse>() {            @Override            public void onResponse(@NonNull Call<MovieResponse> call, @NonNull Response<MovieResponse> response) {                if (response.isSuccessful()) {                    movieAdapter.setMovieResponse(response.body());                    movieAdapter.notifyDataSetChanged();                    mModel = response.body().getResults();                    Utils.hideProgressBar(mBinding.progressBar, mRecycle);                } else {                    mBinding.progressBar.setVisibility(View.INVISIBLE);                    Utils.showToast(mContext, getResources().getString(R.string.toast_error_message));                }            }            @Override            public void onFailure(@NonNull Call<MovieResponse> call, @NonNull Throwable throwable) {                // Toast message if request is failed                mBinding.progressBar.setVisibility(View.INVISIBLE);                Utils.showToast(mContext, getResources().getString(R.string.toast_on_failure));            }        });    }    @Override    public void onMovieClick(Movie movie) {        this.mMovie = movie;        Utils.startIntentWithExtra(mContext, DetailActivity.class, EXTRA_MOVIE_KEY, mMovie);    }}